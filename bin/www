#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("express-p5:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// -------------------- ADDING SOCKET.IO ------------------------
// Enables bi directional communcation between client and server
// Allows real-time data flow
// WebSockets allow both the server and the client to push messages at any time without any relation to a previous request.
// case uses: chats, multiple player games...
// ex: for chats: if you have a chat open, and you are receiving a message, you did not do any request to the server, you just have the page open, listening for sockets

const io = require("socket.io")(server);
io.on("connection", (socket) => {
  console.log("We have a new client: " + socket.id);
  socket.on("mouse", function (data) {
    // Data comes in as whatever was sent, including objects
    console.log("Received: 'mouse' " + data.x + " " + data.y);
    // Send it to all other clients
    socket.broadcast.emit("mouse", data);
    // Note that the server does not broadcast the data back to the sender itself; that can be accomplished with 
    // io.sockets.emit('mouse', data)
  });
  socket.on("disconnect", function () {
    console.log("Client has disconnected");
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
